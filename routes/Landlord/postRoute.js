const router = require('express').Router();
const postController = require("../../controllers/Landlord/PostController");
const { checkAuthorize } = require("../../middleware/authMiddleware");
const { uploadMultiple } = require("../../configs/cloudinary");

/**
 * @swagger
 * tags:
 *   - name: Post by Landlord
 *     description: API qu·∫£n l√Ω b√†i ƒëƒÉng c·ªßa ch·ªß tr·ªç
 */

/**
 * @swagger
 * /landlords/posts/ai-generate:
 *   post:
 *     summary: G·ª£i √Ω m√¥ t·∫£ b√†i ƒëƒÉng b·∫±ng AI
 *     description: Sinh ph·∫ßn m√¥ t·∫£ h·∫•p d·∫´n cho b√†i ƒëƒÉng cho thu√™ ph√≤ng tr·ªç. K·∫øt qu·∫£ tr·∫£ v·ªÅ ·ªü d·∫°ng HTML c√≥ th·ªÉ hi·ªÉn th·ªã tr·ª±c ti·∫øp trong tr√¨nh duy·ªát ho·∫∑c tr√¨nh so·∫°n th·∫£o.
 *     tags: [Post by Landlord]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
*         application/json:
*           schema:
*             type: object
*             required:
*               - title
*               - address
*             properties:
*               title:
*                 type: string
*                 example: Ph√≤ng tr·ªç mini g·∫ßn ƒêH B√°ch Khoa
*               address:
*                 type: string
*                 example: 25 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP.HCM
*               minPrice:
*                 type: number
*                 example: 3000000
*               maxPrice:
*                 type: number
*                 example: 4500000
*               minArea:
*                 type: number
*                 example: 20
*               maxArea:
*                 type: number
*                 example: 30
*               buildingInfo:
*                 type: object
*                 properties:
*                   eIndexType:
*                     type: string
*                     example: byNumber
*                   ePrice:
*                     type: number
*                     example: 3500
*                   wIndexType:
*                     type: string
*                     example: byPerson
*                   wPrice:
*                     type: number
*                     example: 15000
*                   services:
*                     type: array
*                     items:
*                       type: object
*                       properties:
*                         label:
*                           type: string
*                           example: Internet t·ªëc ƒë·ªô cao
*                         fee:
*                           type: number
*                           example: 100000
*                   regulations:
*                     type: array
*                     items:
*                       type: object
*                       properties:
*                         title:
*                           type: string
*                           example: Gi·ªù ra v√†o
*                         description:
*                           type: string
*                           example: T·ª± do 24/24, c√≥ kh√≥a v√¢n tay
 *     responses:
 *       200:
 *         description: M√¥ t·∫£ ƒë∆∞·ª£c sinh ra b·ªüi AI
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     aiDescription:
 *                       type: string
 *                       example: "<p>üè† Ph√≤ng tr·ªç ƒë·∫ßy ƒë·ªß n·ªôi th·∫•t, g·∫ßn ƒêH B√°ch Khoa...</p>"
 */
router.post("/posts/ai-generate", checkAuthorize(["landlord"]), postController.generateDescription);

/**
 * @swagger
 * /landlords/posts/{buildingId}/info:
 *   get:
 *     summary: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa t√≤a nh√†
 *     description: "Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa t√≤a nh√† g·ªìm: danh s√°ch ph√≤ng tr·ªëng, d·ªãch v·ª•, n·ªôi quy v√† gi√° ƒëi·ªán n∆∞·ªõc."
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: buildingId
 *         required: true
 *         schema:
 *           type: string
 *         description: ID c·ªßa t√≤a nh√†
 *     responses:
 *       200:
 *         description: Th√¥ng tin chi ti·∫øt c·ªßa t√≤a nh√†
 */
router.get("/posts/:buildingId/info", checkAuthorize(["landlord"]), postController.getBuildingInfo);

/**
 * @swagger
 * /landlords/posts:
 *   post:
 *     summary: T·∫°o b√†i ƒëƒÉng m·ªõi
 *     description: T·∫°o b√†i ƒëƒÉng cho thu√™ ph√≤ng tr·ªç, c√≥ th·ªÉ ch·ªçn nhi·ªÅu ph√≤ng v√† upload nhi·ªÅu ·∫£nh.
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             required: [title, description, priceMin, priceMax, areaMin, areaMax, address, buildingId, roomIds]
 *             properties:
 *               title:
 *                 type: string
 *                 example: Cho thu√™ ph√≤ng t·∫ßng 3, full n·ªôi th·∫•t
 *               description:
 *                 type: string
 *                 description: N·ªôi dung m√¥ t·∫£ ·ªü d·∫°ng HTML
 *               buildingId:
 *                 type: string
 *               roomIds:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["6719b244b8234d2a1b7e3f45", "6719b244b8234d2a1b7e3f46"]
 *               priceMin:
 *                 type: number
 *                 example: 2500000
 *               priceMax:
 *                 type: number
 *                 example: 2800000
 *               areaMin:
 *                 type: number
 *                 example: 20
 *               areaMax:
 *                 type: number
 *                 example: 25
 *               address:
 *                 type: string
 *                 example: 25 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP.HCM
 *               isDraft:
 *                 type: boolean
 *                 example: false
 *               images:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: binary
 *     responses:
 *       201:
 *         description: T·∫°o b√†i ƒëƒÉng th√†nh c√¥ng
 */
router.post("/posts", checkAuthorize(["landlord"]), uploadMultiple, postController.createPost);

/**
 * @swagger
 * /landlords/posts:
 *   get:
 *     summary: L·∫•y danh s√°ch b√†i ƒëƒÉng c·ªßa ch·ªß tr·ªç (c√≥ ph√¢n trang)
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           example: 1
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           example: 10
 *     responses:
 *       200:
 *         description: Danh s√°ch b√†i ƒëƒÉng c√≥ ph√¢n trang
 */
router.get("/posts", checkAuthorize(["landlord"]), postController.listByLandlord);

/**
 * @swagger
 * /landlords/posts/{id}:
 *   get:
 *     summary: L·∫•y chi ti·∫øt b√†i ƒëƒÉng
 *     description: Tr·∫£ v·ªÅ to√†n b·ªô th√¥ng tin b√†i ƒëƒÉng, k√®m th√¥ng tin t√≤a nh√†, ph√≤ng, d·ªãch v·ª•, n·ªôi quy.
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID b√†i ƒëƒÉng
 *     responses:
 *       200:
 *         description: Th√¥ng tin chi ti·∫øt b√†i ƒëƒÉng
 */
router.get("/posts/:id", checkAuthorize(["landlord"]), postController.getPostDetail);

/**
 * @swagger
 * /landlords/posts/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t b√†i ƒëƒÉng
 *     description: C·∫≠p nh·∫≠t th√¥ng tin b√†i ƒëƒÉng (ti√™u ƒë·ªÅ, m√¥ t·∫£, ƒë·ªãa ch·ªâ, t√≤a nh√†, ph√≤ng, h√¨nh ·∫£nh...). N·∫øu thay ƒë·ªïi danh s√°ch ph√≤ng th√¨ h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t l·∫°i gi√° v√† di·ªán t√≠ch min/max d·ª±a tr√™n c√°c ph√≤ng ƒë√£ ch·ªçn.
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID c·ªßa b√†i ƒëƒÉng c·∫ßn c·∫≠p nh·∫≠t
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 example: C·∫≠p nh·∫≠t b√†i ƒëƒÉng ph√≤ng tr·ªç qu·∫≠n 10
 *               description:
 *                 type: string
 *                 example: <p>Ph√≤ng s·∫°ch, m·ªõi s∆°n, c√≥ g√°c l·ª≠ng, g·∫ßn ch·ª£ H√≤a H∆∞ng.</p>
 *               address:
 *                 type: string
 *                 example: 25 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP.HCM
 *               buildingId:
 *                 type: string
 *                 example: 6717a244b8234d2a1b7e3f45
 *               roomIds:
 *                 type: array
 *                 description: Danh s√°ch ID c√°c ph√≤ng ƒë∆∞·ª£c li√™n k·∫øt v·ªõi b√†i ƒëƒÉng
 *                 items:
 *                   type: string
 *                 example: ["6717a244b8234d2a1b7e3f45", "6717a244b8234d2a1b7e3f46"]
 *               isDraft:
 *                 type: boolean
 *                 example: false
 *               images:
 *                 type: array
 *                 description: ·∫¢nh m·ªõi (n·∫øu c√≥). C√≥ th·ªÉ upload nhi·ªÅu ·∫£nh c√πng l√∫c.
 *                 items:
 *                   type: string
 *                   format: binary
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t b√†i ƒëƒÉng th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: C·∫≠p nh·∫≠t b√†i ƒëƒÉng th√†nh c√¥ng!
 *                 data:
 *                   $ref: '#/components/schemas/Post'
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng
 *       500:
 *         description: L·ªói server
 */
router.put("/posts/:id", checkAuthorize(["landlord"]), uploadMultiple, postController.updatePost);

/**
 * @swagger
 * /landlords/posts/{id}/soft-delete:
 *   patch:
 *     summary: X√≥a m·ªÅm b√†i ƒëƒÉng
 *     description: ƒê√°nh d·∫•u b√†i ƒëƒÉng l√† ƒë√£ x√≥a (isDeleted=true, status=hidden). Ch·ªâ ch·ªß tr·ªç c√≥ quy·ªÅn x√≥a b√†i c·ªßa m√¨nh.
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: X√≥a m·ªÅm th√†nh c√¥ng
 */
router.patch("/posts/:id/soft-delete", checkAuthorize(["landlord"]), postController.softDelete);

module.exports = router;
