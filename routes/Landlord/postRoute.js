const router = require('express').Router();
const postController = require("../../controllers/Landlord/PostController");
const { checkAuthorize } = require("../../middleware/authMiddleware");
const { uploadMultiple, uploadSingle } = require("../../configs/cloudinary");


/**
 * @swagger
 * tags:
 *   - name: Post by Landlord
 *     description: API qu·∫£n l√Ω b√†i ƒëƒÉng cho landlord
 */

/**
 * @swagger
 * /landlords/posts/ai-generate:
 *   post:
 *     summary: G·ª£i √Ω n·ªôi dung m√¥ t·∫£ b√†i ƒëƒÉng b·∫±ng AI
 *     description: Sinh ph·∫ßn m√¥ t·∫£ h·∫•p d·∫´n cho b√†i ƒëƒÉng cho thu√™ tr·ªç d·ª±a tr√™n c√°c th√¥ng tin c∆° b·∫£n (title, price, area, address). K·∫øt qu·∫£ tr·∫£ v·ªÅ ·ªü d·∫°ng HTML c√≥ th·ªÉ hi·ªÉn th·ªã tr·ª±c ti·∫øp tr√™n trang.
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - title
 *               - price
 *               - area
 *               - address
 *             properties:
 *               title:
 *                 type: string
 *                 example: Ph√≤ng tr·ªç g·∫ßn ƒêH B√°ch Khoa, s·∫°ch ƒë·∫πp, an ninh
 *               price:
 *                 type: number
 *                 example: 3500000
 *               area:
 *                 type: number
 *                 example: 25
 *               address:
 *                 type: string
 *                 example: 25 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP.HCM
 *     responses:
 *       200:
 *         description: Th√†nh c√¥ng ‚Äî Tr·∫£ v·ªÅ m√¥ t·∫£ ƒë∆∞·ª£c AI sinh ra ·ªü d·∫°ng HTML
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     aiDescription:
 *                       type: string
 *                       example: |
 *                         <p><b>üè† Ph√≤ng tr·ªç cao c·∫•p</b> g·∫ßn <i>ƒêH B√°ch Khoa</i>, di·ªán t√≠ch 25m¬≤, s·∫°ch s·∫Ω, tho√°ng m√°t.</p>
 *                         <p>üí° Trang b·ªã ƒë·∫ßy ƒë·ªß n·ªôi th·∫•t, an ninh ƒë·∫£m b·∫£o, gi·ªù gi·∫•c t·ª± do.</p>
 *                         <p><b>Gi√° thu√™:</b> 3.500.000ƒë/th√°ng</p>
 *       400:
 *         description: Thi·∫øu th√¥ng tin y√™u c·∫ßu
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!
 *       500:
 *         description: L·ªói h·ªá th·ªëng ho·∫∑c l·ªói AI
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: L·ªói khi g·ªçi AI
 */
router.post("/posts/ai-generate", checkAuthorize(["landlord"]), postController.generateDescription);

/**
 * @swagger
 * /landlords/posts:
 *   post:
 *     summary: T·∫°o b√†i ƒëƒÉng cho thu√™ tr·ªç
 *     description: T·∫°o m·ªôt b√†i ƒëƒÉng m·ªõi. Ch·ªß tr·ªç c√≥ th·ªÉ nh·∫≠p th·ªß c√¥ng ho·∫∑c d√πng ph·∫ßn m√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c AI sinh ra. H·ªó tr·ª£ upload nhi·ªÅu ·∫£nh b·∫±ng multipart/form-data.
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             required:
 *               - title
 *               - description
 *               - price
 *               - area
 *               - address
 *             properties:
 *               title:
 *                 type: string
 *                 example: Ph√≤ng tr·ªç mini full n·ªôi th·∫•t Qu·∫≠n 10
 *               description:
 *                 type: string
 *                 description: M√¥ t·∫£ ·ªü d·∫°ng HTML (c√≥ th·ªÉ ƒë∆∞·ª£c t·∫°o b·ªüi AI)
 *                 example: |
 *                   <p><b>‚ú® Ph√≤ng tr·ªç mini</b> m·ªõi x√¢y, di·ªán t√≠ch 25m¬≤, trang b·ªã ƒë·∫ßy ƒë·ªß n·ªôi th·∫•t.</p>
 *                   <p>üöø Toilet ri√™ng, c√≥ c·ª≠a s·ªï tho√°ng m√°t. <i>Ph√π h·ª£p sinh vi√™n v√† nh√¢n vi√™n vƒÉn ph√≤ng.</i></p>
 *                   <p><b>üí∞ Gi√° thu√™:</b> 3.500.000ƒë/th√°ng</p>
 *               price:
 *                 type: number
 *                 example: 3500000
 *               area:
 *                 type: number
 *                 example: 25
 *               address:
 *                 type: string
 *                 example: 25 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP.HCM
 *               buildingId:
 *                 type: string
 *                 example: 6717a244b8234d2a1b7e3f45
 *               isDraft:
 *                 type: boolean
 *                 example: false
 *               images:
 *                 type: array
 *                 description: Danh s√°ch ·∫£nh upload (c√≥ th·ªÉ ch·ªçn nhi·ªÅu ·∫£nh)
 *                 items:
 *                   type: string
 *                   format: binary
 *     responses:
 *       201:
 *         description: T·∫°o b√†i ƒëƒÉng th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     _id:
 *                       type: string
 *                       example: 6717a54acb312c9c4e7d22b3
 *                     title:
 *                       type: string
 *                       example: Ph√≤ng tr·ªç mini full n·ªôi th·∫•t Qu·∫≠n 10
 *                     slug:
 *                       type: string
 *                       example: phong-tro-mini-full-noi-that-quan-10
 *                     address:
 *                       type: string
 *                       example: 25 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP.HCM
 *                     price:
 *                       type: number
 *                       example: 3500000
 *                     area:
 *                       type: number
 *                       example: 25
 *                     status:
 *                       type: string
 *                       enum: [active, hidden, expired]
 *                       example: active
 *       400:
 *         description: Thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Thi·∫øu th√¥ng tin b√†i ƒëƒÉng!
 *       500:
 *         description: L·ªói h·ªá th·ªëng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: L·ªói h·ªá th·ªëng!
 */
router.post("/posts", checkAuthorize(["landlord"]), uploadMultiple, postController.createPost);

/**
 * @swagger
 * /landlords/posts:
 *   get:
 *     summary: L·∫•y danh s√°ch b√†i ƒëƒÉng c·ªßa ch·ªß tr·ªç
 *     description: Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ b√†i ƒëƒÉng (ch∆∞a b·ªã x√≥a m·ªÅm) c·ªßa ch·ªß tr·ªç ƒëang ƒëƒÉng nh·∫≠p.
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: Danh s√°ch b√†i ƒëƒÉng c·ªßa ch·ªß tr·ªç
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       _id:
 *                         type: string
 *                         example: 6717e5c3f1a8b4e567123abc
 *                       title:
 *                         type: string
 *                         example: Ph√≤ng tr·ªç 25m2 gi√° 2 tri·ªáu/th√°ng t·∫°i Qu·∫≠n 7
 *                       slug:
 *                         type: string
 *                         example: phong-tro-25m2-gia-2-trieu-thang-tai-quan-7
 *                       description:
 *                         type: string
 *                         example: Ph√≤ng s·∫°ch s·∫Ω, c√≥ g√°c, g·∫ßn ƒêH T√¥n ƒê·ª©c Th·∫Øng.
 *                       price:
 *                         type: number
 *                         example: 2000000
 *                       area:
 *                         type: number
 *                         example: 25
 *                       address:
 *                         type: string
 *                         example: 123 Nguy·ªÖn VƒÉn Linh, Qu·∫≠n 7, TP.HCM
 *                       isDraft:
 *                         type: boolean
 *                         example: false
 *                       isDeleted:
 *                         type: boolean
 *                         example: false
 *                       createdAt:
 *                         type: string
 *                         format: date-time
 *                         example: 2025-10-22T13:00:00.000Z
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
 *       500:
 *         description: L·ªói server
 */
router.get("/posts", checkAuthorize(["landlord"]), postController.listByLandlord);

/**
 * @swagger
 * /landlords/posts/{id}/soft-delete:
 *   patch:
 *     summary: X√≥a m·ªÅm b√†i ƒëƒÉng
 *     description: ƒê√°nh d·∫•u b√†i ƒëƒÉng l√† ƒë√£ x√≥a (isDeleted=true, status=hidden). Ch·ªâ ch·ªß tr·ªç c√≥ quy·ªÅn x√≥a b√†i c·ªßa m√¨nh.
 *     tags: [Post by Landlord]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: ID c·ªßa b√†i ƒëƒÉng c·∫ßn x√≥a m·ªÅm
 *         schema:
 *           type: string
 *           example: 6717e5c3f1a8b4e567123abc
 *     responses:
 *       200:
 *         description: X√≥a m·ªÅm th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: X√≥a b√†i ƒëƒÉng (m·ªÅm) th√†nh c√¥ng!
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng!
 *       401:
 *         description: Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
 *       500:
 *         description: L·ªói server
 */
router.patch("/posts/:id/soft-delete", checkAuthorize(["landlord"]), postController.softDelete);
module.exports = router;
